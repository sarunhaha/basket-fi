// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  email         String?  @unique
  displayName   String?
  role          String   @default("USER") // Added for seed.ts
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User preferences
  language      String @default("en")
  currency      String @default("USD")
  emailNotifications Boolean @default(false)
  pushNotifications  Boolean @default(true)

  // Relations
  baskets       Basket[]
  alerts        Alert[]
  wallets       Wallet[]

  @@map("users")
}

model Basket {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalValue  String?
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true) // Added for seed.ts
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocations TokenAllocation[]
  basketAssets BasketAsset[]
  alerts      Alert[]
  rebalances  Rebalance[]

  @@map("baskets")
}

model Token {
  address     String  @id
  symbol      String
  name        String
  decimals    Int
  logoUri     String?
  price       String?
  priceChange24h Float?
  marketCap   String?
  volume24h   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  allocations     TokenAllocation[]
  basketAssets    BasketAsset[]
  priceHistory    TokenPriceHistory[]
  alerts          Alert[]

  @@map("tokens")
}

model TokenAllocation {
  id         String @id @default(cuid())
  percentage Float
  amount     String?

  // Relations
  basketId     String
  basket       Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)
  tokenAddress String
  token        Token  @relation(fields: [tokenAddress], references: [address], onDelete: Cascade)

  @@unique([basketId, tokenAddress])
  @@map("token_allocations")
}

model TokenPriceHistory {
  id        String   @id @default(cuid())
  price     String
  volume    String?
  timestamp DateTime @default(now())

  // Relations
  tokenAddress String
  token        Token @relation(fields: [tokenAddress], references: [address], onDelete: Cascade)

  @@unique([tokenAddress, timestamp])
  @@map("token_price_history")
}

model Alert {
  id          String   @id @default(cuid())
  type        String   // "price", "percentage", "rebalance"
  condition   String   // "above", "below", "change"
  value       String
  isActive    Boolean  @default(true)
  isTriggered   Boolean  @default(false) // Added for seed.ts
  lastTriggered DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  basketId     String?
  basket       Basket? @relation(fields: [basketId], references: [id], onDelete: Cascade)
  tokenAddress String?
  token        Token?  @relation(fields: [tokenAddress], references: [address], onDelete: Cascade)

  @@map("alerts")
}

model Wallet {
  id            String   @id @default(cuid())
  address       String   @unique
  name          String?
  balance       String   @default("0")
  chainId       String   @default("1")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model BasketAsset {
  id           String   @id @default(cuid())
  amount       String
  value        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  basketId     String
  basket       Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)
  tokenAddress String
  token        Token  @relation(fields: [tokenAddress], references: [address], onDelete: Cascade)

  @@unique([basketId, tokenAddress])
  @@map("basket_assets")
}

model Allocation {
  id               String   @id @default(cuid())
  percentage       Float
  targetPercentage Float?
  amount           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  basketId         String
  tokenAddress     String

  @@unique([basketId, tokenAddress])
  @@map("allocations")
}

model PriceSnapshot {
  id           String   @id @default(cuid())
  price        String
  volume24h    String?
  timestamp    DateTime @default(now())

  // Relations
  tokenAddress String

  @@unique([tokenAddress, timestamp])
  @@map("price_snapshots")
}

model Transaction {
  id              String   @id @default(cuid())
  type            String   // "buy", "sell", "rebalance"
  amount          String
  price           String?
  transactionHash String?
  status          String   @default("pending") // "pending", "completed", "failed"
  userId          String?
  gasUsed         String?
  gasPrice        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  basketId        String?
  tokenAddress    String?

  @@map("transactions")
}

model Rebalance {
  id              String   @id @default(cuid())
  type            String   // "manual", "automatic", "threshold"
  status          String   @default("pending") // "pending", "completed", "failed"
  transactionHash String?
  userId          String?
  trades          String?  // JSON string
  estimatedGas    String?
  executedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  basketId        String
  basket          Basket @relation(fields: [basketId], references: [id], onDelete: Cascade)

  @@map("rebalances")
}