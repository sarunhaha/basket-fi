/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö DEX (Decentralized Exchange) ‡πÅ‡∏•‡∏∞ Liquidity Pools
 * ‡∏ö‡∏ô Monad Testnet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tokens
 */

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DEX Protocol
 * DEX = Decentralized Exchange (‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏≠‡∏≥‡∏ô‡∏≤‡∏à)
 */
export interface DEXProtocol {
  name: string;                    // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á DEX ‡πÄ‡∏ä‡πà‡∏ô "Uniswap", "SushiSwap"
  website: string;                 // ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á DEX
  factoryAddress?: string;         // Contract address ‡∏Ç‡∏≠‡∏á Factory (‡∏™‡∏£‡πâ‡∏≤‡∏á liquidity pools)
  routerAddress?: string;          // Contract address ‡∏Ç‡∏≠‡∏á Router (‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ swap tokens)
  subgraphUrl?: string;           // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å The Graph (optional)
  apiUrl?: string;                // API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (optional)
  isActive: boolean;              // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ DEX ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Liquidity Pool
 * Liquidity Pool = ‡∏Å‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tokens
 */
/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Token
 */
export interface TokenInfo {
  address: string;              // Contract address ‡∏Ç‡∏≠‡∏á token
  symbol: string;               // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡πÄ‡∏ä‡πà‡∏ô "ETH", "USDC"
  decimals: number;             // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô 18 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ETH
  name: string;                 // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á token ‡πÄ‡∏ä‡πà‡∏ô "Ethereum", "USD Coin"
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Liquidity Pool
 * Liquidity Pool = ‡∏Å‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tokens
 */
export interface LiquidityPool {
  address: string;                // Contract address ‡∏Ç‡∏≠‡∏á pool
  token0: TokenInfo;              // Token ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô pool
  token1: TokenInfo;              // Token ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÉ‡∏ô pool
  reserve0: string;               // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token0 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô pool (‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏ç‡πà)
  reserve1: string;               // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token1 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô pool
  totalSupply: string;            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô LP tokens ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ
  fee: number;                    // ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÉ‡∏ô basis points (30 = 0.3%)
  protocol: string;               // ‡∏ä‡∏∑‡πà‡∏≠ DEX ‡∏ó‡∏µ‡πà pool ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
}

/**
 * ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ DEX Protocols ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ô Monad Testnet
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Contract addresses ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Monad community
 */
export const MONAD_TESTNET_DEX_PROTOCOLS: DEXProtocol[] = [
  {
    name: 'MonadSwap',                    // DEX ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Monad (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
    website: 'https://monadswap.xyz',
    factoryAddress: '0x...',             // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ address ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Monad docs
    routerAddress: '0x...',              // ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ address ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Monad docs
    isActive: true,                      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  },
  {
    name: 'Uniswap V2 Fork',             // DEX ‡∏ó‡∏µ‡πà copy ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Uniswap V2
    website: 'https://testnet-dex.monad.xyz',
    factoryAddress: '0x...',             // ‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ address ‡∏à‡∏£‡∏¥‡∏á
    routerAddress: '0x...',              // ‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ address ‡∏à‡∏£‡∏¥‡∏á
    isActive: true,
  },
  // üìù TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° DEX ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏ô Monad Testnet
  // ‡πÄ‡∏ä‡πà‡∏ô SushiSwap fork, PancakeSwap fork, etc.
];

/**
 * Token addresses ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ö‡∏ô Monad Testnet
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ addresses ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Monad testnet
 */
export const MONAD_TESTNET_TOKENS = {
  WMON: '0x...',  // Wrapped MON (MON ‡∏ó‡∏µ‡πà wrap ‡πÄ‡∏õ‡πá‡∏ô ERC-20 token)
  USDC: '0x...',  // USD Coin testnet version
  USDT: '0x...',  // Tether testnet version  
  WETH: '0x...',  // Wrapped Ethereum testnet version
  DAI: '0x...',   // DAI stablecoin testnet version
} as const;

/**
 * ‡∏Ñ‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏° (Trading Pairs)
 * ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏à‡∏∞‡∏°‡∏µ liquidity pool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏±‡∏ô
 */
export const POPULAR_PAIRS = [
  ['WMON', 'USDC'],  // MON ‡∏Å‡∏±‡∏ö USDC (‡∏Ñ‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å)
  ['WMON', 'USDT'],  // MON ‡∏Å‡∏±‡∏ö USDT
  ['WMON', 'WETH'],  // MON ‡∏Å‡∏±‡∏ö ETH
  ['USDC', 'USDT'],  // Stablecoin pair
  ['WETH', 'USDC'],  // ETH ‡∏Å‡∏±‡∏ö USDC
] as const;